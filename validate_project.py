#!/usr/bin/env python3
"""
Script de valida√ß√£o completa do projeto
Verifica se todos os componentes est√£o funcionando corretamente
"""

import os
import sys
import subprocess
import time
import webbrowser
from threading import Thread

def check_file_structure():
    """Verifica se a estrutura de arquivos est√° correta"""
    print("üîç Verificando estrutura de arquivos...")
    
    required_files = [
        'main.py',
        'app_handler.py',
        'index.html',
        'style.css',
        'images/root-finding.png',
        'images/linear-system.png',
        'NumericCalculator/app.py',
        'NumericCalculator/main.py',
        'NumericCalculator/static/css/style.css',
        'NumericCalculator/templates/index.html',
        'GaussEliminationSolver/main.py',
        'GaussEliminationSolver/gui_components.py',
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå Arquivos ausentes:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    else:
        print("‚úÖ Todos os arquivos necess√°rios est√£o presentes")
        return True

def check_css_content():
    """Verifica se o CSS tem conte√∫do adequado"""
    print("\nüé® Verificando conte√∫do do CSS...")
    
    css_files = [
        ('style.css', 'CSS da p√°gina principal'),
        ('NumericCalculator/static/css/style.css', 'CSS do NumericCalculator')
    ]
    
    for css_file, description in css_files:
        if os.path.exists(css_file):
            with open(css_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if len(content) > 1000:
                    print(f"‚úÖ {description}: {len(content)} caracteres")
                else:
                    print(f"‚ö†Ô∏è {description}: Muito pequeno ({len(content)} caracteres)")
        else:
            print(f"‚ùå {description}: Arquivo n√£o encontrado")

def check_html_css_links():
    """Verifica se os links CSS est√£o corretos no HTML"""
    print("\nüîó Verificando links CSS no HTML...")
    
    html_file = 'NumericCalculator/templates/index.html'
    if os.path.exists(html_file):
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
            if 'url_for(\'static\', filename=\'css/style.css\')' in content:
                print("‚úÖ Link CSS correto no template do NumericCalculator")
            else:
                print("‚ùå Link CSS ausente no template do NumericCalculator")
                
            if 'href="http://localhost:8000"' in content:
                print("‚úÖ Bot√£o 'Voltar' aponta para o servidor correto")
            else:
                print("‚ö†Ô∏è Bot√£o 'Voltar' pode n√£o estar apontando para o servidor correto")
    else:
        print("‚ùå Template HTML do NumericCalculator n√£o encontrado")

def start_application():
    """Inicia a aplica√ß√£o e testa o funcionamento"""
    print("\nüöÄ Iniciando aplica√ß√£o...")
    
    try:
        # Inicia o aplicativo principal em background
        process = subprocess.Popen([sys.executable, 'main.py'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        # Aguarda um momento para o servidor iniciar
        time.sleep(3)
        
        print("‚úÖ Aplica√ß√£o iniciada com sucesso")
        print("üåê Acesse: http://localhost:8000")
        
        # Opcionalmente abre o navegador
        choice = input("\nDeseja abrir o navegador automaticamente? (s/n): ")
        if choice.lower() == 's':
            webbrowser.open("http://localhost:8000")
        
        print("\n‚ö° Para parar a aplica√ß√£o, use Ctrl+C")
        
        # Mant√©m o processo em execu√ß√£o at√© o usu√°rio decidir parar
        try:
            process.wait()
        except KeyboardInterrupt:
            print("\nüõë Parando aplica√ß√£o...")
            process.terminate()
            process.wait()
            
    except Exception as e:
        print(f"‚ùå Erro ao iniciar aplica√ß√£o: {str(e)}")

def main():
    """Fun√ß√£o principal de valida√ß√£o"""
    print("üß™ VALIDA√á√ÉO COMPLETA DO PROJETO")
    print("=" * 50)
    
    # Verifica estrutura de arquivos
    if not check_file_structure():
        print("\n‚ùå Valida√ß√£o falhou - arquivos ausentes")
        return
    
    # Verifica conte√∫do CSS
    check_css_content()
    
    # Verifica links HTML
    check_html_css_links()
    
    print("\n" + "=" * 50)
    print("‚úÖ VALIDA√á√ÉO CONCLU√çDA")
    print("=" * 50)
    
    # Pergunta se quer iniciar a aplica√ß√£o
    choice = input("\nDeseja iniciar a aplica√ß√£o agora? (s/n): ")
    if choice.lower() == 's':
        start_application()
    else:
        print("\nüìã Para iniciar manualmente, execute: python3 main.py")

if __name__ == "__main__":
    main()
